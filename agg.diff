commit 81854bd351da574cc95065286460ab1fb588da3d
Author: Marcin Lewandowski <marcin@ravendb.net>
Date:   Wed May 23 09:31:51 2018 +0200

    aggresive caching

diff --git a/src/main/java/net/ravendb/client/documents/DocumentStore.java b/src/main/java/net/ravendb/client/documents/DocumentStore.java
index f750022a..49707fe4 100644
--- a/src/main/java/net/ravendb/client/documents/DocumentStore.java
+++ b/src/main/java/net/ravendb/client/documents/DocumentStore.java

@@ -80,31 +83,21 @@ public class DocumentStore extends DocumentStoreBase {
 
     public void close() {
         EventHelper.invoke(beforeClose, this, EventArgs.EMPTY);
-        /* TBD
 
-            foreach (var value in _aggressiveCacheChanges.Values)
-            {
-                if (value.IsValueCreated == false)
-                    continue;
-
-                value.Value.Dispose();
+        for (Lazy<EvictItemsFromCacheBasedOnChanges> value : _aggressiveCacheChanges.values()) {
+            if (!value.isValueCreated()) {
+                continue;
             }
 
-            var tasks = new List<Task>();
-            */
+            value.getValue().close();
+        }
 
         for (IDatabaseChanges changes : _databaseChanges.values()) {
             try (CleanCloseable value = changes) {
+                // try will close all values
             }
         }
 
-
       null;
     }
 
-    //TBD public override IDisposable AggressivelyCacheFor(TimeSpan cacheDuration, string database = null)
-    //TBD private void ListenToChangesAndUpdateTheCache(string database)
+    @Override
+    public CleanCloseable aggressivelyCacheFor(Duration cacheDuration) {
+        return aggressivelyCacheFor(cacheDuration, null);
+    }
+
+    @Override
+    public CleanCloseable aggressivelyCacheFor(Duration cacheDuration, String database) {
+        assertInitialized();
+
+        database = ObjectUtils.firstNonNull(database, getDatabase());
+
+        if (database == null) {
+            throw new IllegalStateException("Cannot use aggressivelyCache and aggressivelyCacheFor without a default database defined " +
+                    "unless 'database' parameter is provided. Did you forget to pass 'database' parameter?");
+        }
+
+        if (!_aggressiveCachingUsed) {
+            listenToChangesAndUpdateTheCache(database);
+        }
+
+        RequestExecutor re = getRequestExecutor(database);
+        AggressiveCacheOptions old = re.aggressiveCaching.get();
+
+        re.aggressiveCaching.set(new AggressiveCacheOptions(cacheDuration));
+
+        return () -> re.aggressiveCaching.set(old);
+    }
+
+    private void listenToChangesAndUpdateTheCache(String database) {
+
+        // this is intentionally racy, most cases, we'll already
+        // have this set once, so we won't need to do it again
+
+        _aggressiveCachingUsed = true;
+        Lazy<EvictItemsFromCacheBasedOnChanges> lazy = _aggressiveCacheChanges.get(database);
+
+        if (lazy == null) {
+            lazy = _aggressiveCacheChanges.computeIfAbsent(database, db -> {
+                return new Lazy<>(() -> new EvictItemsFromCacheBasedOnChanges(this, database));
+            });
+        }
+
+        lazy.getValue(); // force evaluation
+    }
 
     private final List<EventHandler<VoidArgs>> afterClose = new ArrayList<>();
 
diff --git a/src/main/java/net/ravendb/client/documents/DocumentStoreBase.java b/src/main/java/net/ravendb/client/documents/DocumentStoreBase.java
index 7a18ca38..4d68449f 100644
--- a/src/main/java/net/ravendb/client/documents/DocumentStoreBase.java
+++ b/src/main/java/net/ravendb/client/documents/DocumentStoreBase.java

 
@@ -53,13 +55,21 @@ public abstract class DocumentStoreBase implements IDocumentStore {
         return disposed;
     }
 
-    //TBD: public abstract IDisposable AggressivelyCacheFor(TimeSpan cacheDuration, string database = null);
+    @Override
+    public abstract CleanCloseable aggressivelyCacheFor(Duration cacheDuration);
+
+    @Override
+    public abstract CleanCloseable aggressivelyCacheFor(Duration cacheDuration, String database);
 
     public abstract IDatabaseChanges changes();
 
     public abstract IDatabaseChanges changes(String database);
 
-    //TBD: public abstract IDisposable DisableAggressiveCaching(string database = null);
+    @Override
+    public abstract CleanCloseable disableAggressiveCaching();
+
+    @Override
+    public abstract CleanCloseable disableAggressiveCaching(String database);
 
     public abstract String getIdentifier();
 
@@ -237,7 +247,15 @@ public abstract class DocumentStoreBase implements IDocumentStore {
 
     public abstract RequestExecutor getRequestExecutor(String databaseName);
 
-    //TBD public IDisposable AggressivelyCache(string database = null)
+    @Override
+    public CleanCloseable aggressivelyCache() {
+        return aggressivelyCache(null);
+    }
+
+    @Override
+    public CleanCloseable aggressivelyCache(String database) {
+        return aggressivelyCacheFor(Duration.ofDays(1), database);
+    }
 
     protected void registerEvents(InMemoryDocumentSessionOperations session) {
         for (EventHandler<BeforeStoreEventArgs> handler : onBeforeStore) {

 }
     }
diff --git a/src/test/java/net/ravendb/client/bugs/AggressiveCaching.java b/src/test/java/net/ravendb/client/bugs/AggressiveCaching.java
new file mode 100644
index 00000000..55904448
--- /dev/null
+++ b/src/test/java/net/ravendb/client/bugs/AggressiveCaching.java
@@ -0,0 +1,109 @@
+package net.ravendb.client.bugs;
+
+import net.ravendb.client.RemoteTestBase;
+import net.ravendb.client.documents.DocumentStore;
+import net.ravendb.client.documents.IDocumentStore;
+import net.ravendb.client.documents.session.IDocumentSession;
+import net.ravendb.client.http.RequestExecutor;
+import net.ravendb.client.infrastructure.entities.User;
+import net.ravendb.client.primitives.CleanCloseable;
+import org.assertj.core.api.Assertions;
+import org.junit.jupiter.api.Test;
+
+import java.time.Duration;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class AggressiveCaching extends RemoteTestBase {
+
+    public DocumentStore initAggressiveCaching() throws Exception {
+        DocumentStore store = getDocumentStore();
+        store.disableAggressiveCaching();
+
+        try (IDocumentSession session = store.openSession()) {
+            session.store(new User());
+            session.saveChanges();
+        }
+
+        return store;
+    }
+
+    @Test
+    public void canAggressivelyCacheLoads_404() throws Exception {
+        try (IDocumentStore store = initAggressiveCaching()) {
+            RequestExecutor requestExecutor = store.getRequestExecutor();
+
+            long oldNumOfRequests = requestExecutor.numberOfServerRequests.get();
+            for (int i = 0; i < 5; i++) {
+                try (IDocumentSession session = store.openSession()) {
+                    try (CleanCloseable context = session.advanced().getDocumentStore().aggressivelyCacheFor(Duration.ofMinutes(5))) {
+                        session.load(User.class, "users/not-there");
+                    }
+                }
+            }
+
+            assertThat(requestExecutor.numberOfServerRequests.get())
+                    .isEqualTo(1 + oldNumOfRequests);
+        }
+    }
+
+    @Test
+    public void canAggressivelyCacheLoads() throws Exception {
+        try (IDocumentStore store = initAggressiveCaching()) {
+            RequestExecutor requestExecutor = store.getRequestExecutor();
+
+            long oldNumOfRequests = requestExecutor.numberOfServerRequests.get();
+            for (int i = 0; i < 5; i++) {
+                try (IDocumentSession session = store.openSession()) {
+                    try (CleanCloseable context = session.advanced().getDocumentStore().aggressivelyCacheFor(Duration.ofMinutes(5))) {
+                        session.load(User.class, "users/1-A");
+                    }
+                }
+            }
+
+            assertThat(requestExecutor.numberOfServerRequests.get())
+                    .isEqualTo(1 + oldNumOfRequests);
+        }
+    }
+
+    @Test
+    public void canAggressivelyCacheQueries() throws Exception {
+        try (IDocumentStore store = initAggressiveCaching()) {
+            RequestExecutor requestExecutor = store.getRequestExecutor();
+
+            long oldNumOfRequests = requestExecutor.numberOfServerRequests.get();
+            for (int i = 0; i < 5; i++) {
+                try (IDocumentSession session = store.openSession()) {
+                    try (CleanCloseable context = session.advanced().getDocumentStore().aggressivelyCacheFor(Duration.ofMinutes(5))) {
+                        session.query(User.class).toList();
+                    }
+                }
+            }
+
+            assertThat(requestExecutor.numberOfServerRequests.get())
+                    .isEqualTo(1 + oldNumOfRequests);
+        }
+    }
+
+    @Test
+    public void waitForNonStaleResultsIgnoresAggressiveCaching() throws Exception {
+        try (IDocumentStore store = initAggressiveCaching()) {
+            RequestExecutor requestExecutor = store.getRequestExecutor();
+
+            long oldNumOfRequests = requestExecutor.numberOfServerRequests.get();
+            for (int i = 0; i < 5; i++) {
+                try (IDocumentSession session = store.openSession()) {
+                    try (CleanCloseable context = session.advanced().getDocumentStore().aggressivelyCacheFor(Duration.ofMinutes(5))) {
+                        session
+                                .query(User.class)
+                                .waitForNonStaleResults()
+                                .toList();
+                    }
+                }
+            }
+
+            assertThat(requestExecutor.numberOfServerRequests.get())
+                    .isNotEqualTo(1 + oldNumOfRequests);
+        }
+    }
+}
